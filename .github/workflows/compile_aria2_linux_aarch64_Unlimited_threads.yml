#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: GPL-3.0
# Author: lazymartin
#=================================================

name: Compile aria2 linux aarch64 Latest release

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TZ: Asia/Shanghai

on:
  schedule:
    - cron: '00 19 * * 0'
  push:
    paths: 
      - '.github/workflows/compile_aria2_linux_aarch64_Unlimited_threads.yml'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu pkg-config-aarch64-linux-gnu
        sudo chown $UID -R /usr/aarch64-linux-gnu
        sudo mkdir -p /opt/aria2-arm
        sudo chown $UID /opt/aria2-arm
        
    - name: Install dependences and compile
      id: compile
      continue-on-error: true
      run: |
        DOWNLOADER="wget -c"
        
        ## DEPENDENCES ##
        ZLIB=http://sourceforge.net/projects/libpng/files/zlib/1.2.11/zlib-1.2.11.tar.gz
        OPENSSL=http://www.openssl.org/source/openssl-1.0.2o.tar.gz
        EXPAT=https://github.com/libexpat/libexpat/releases/download/R_2_4_1/expat-2.4.1.tar.bz2
        SQLITE3=http://www.sqlite.org/2018/sqlite-autoconf-3230100.tar.gz
        C_ARES=http://c-ares.haxx.se/download/c-ares-1.14.0.tar.gz
        SSH2=https://www.libssh2.org/download/libssh2-1.7.0.tar.gz

        ## CONFIG ##
        ARCH="aarch64"
        HOST="aarch64-linux-gnu"
        PREFIX="/opt/aria2-arm/build_libs"
        LOCAL_DIR="/opt/aria2-arm/build_libs"

        #TOOL_BIN_DIR="/opt/aria2-arm-rbpi/tools/arm-bcm2708/gcc-linaro-$HOST-raspbian/bin"
        #PATH=${TOOL_BIN_DIR}:$PATH

        CFLAGS="-march=armv8-a+crypto+crc -mtune=cortex-a53"
        DEST="/usr/aarch64-linux-gnu"
        CC=$HOST-gcc
        CXX=$HOST-g++
        LDFLAGS="-L$DEST/lib"
        CPPFLAGS="-I$DEST/include"
        CXXFLAGS=$CFLAGS
        CONFIGURE="./configure --prefix=${LOCAL_DIR} --host=$HOST"
        BUILD_DIRECTORY=/tmp/

        ## BUILD ##
        cd $BUILD_DIRECTORY
        #
        # zlib build
          $DOWNLOADER $ZLIB
          tar zxvf zlib-1.2.11.tar.gz
          cd zlib-1.2.11/
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC=$HOST-gcc STRIP=$HOST-strip RANLIB=$HOST-ranlib CXX=$HOST-g++ AR=$HOST-ar LD=$HOST-ld ./configure --prefix=$PREFIX --static
          make -j$(nproc)
          make -j$(nproc) install
        #
        # expat build
          cd ..
          $DOWNLOADER $EXPAT
          tar jxvf expat-2.4.1.tar.bz2
          cd expat-2.4.1/
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC=$HOST-gcc CXX=$HOST-g++ ./configure --host=$HOST --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` --prefix=$PREFIX --enable-static=yes --enable-shared=no
          make -j$(nproc)
          make -j$(nproc) install
        #
        # c-ares build
          cd ..
          $DOWNLOADER $C_ARES
          tar zxvf c-ares-1.14.0.tar.gz
          cd c-ares-1.14.0/
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC=$HOST-gcc CXX=$HOST-g++ ./configure --host=$HOST --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` --prefix=$PREFIX --enable-static --disable-shared
          make -j$(nproc)
          make -j$(nproc) install
        #
        # Openssl build
          cd ..
          $DOWNLOADER $OPENSSL
          tar zxvf openssl-1.0.2o.tar.gz
          cd openssl-1.0.2o/
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC=$HOST-gcc CXX=$HOST-g++ ./Configure linux-aarch64 $CFLAGS --prefix=$PREFIX shared zlib zlib-dynamic -D_GNU_SOURCE -D_BSD_SOURCE --with-zlib-lib=$LOCAL_DIR/lib --with-zlib-include=$LOCAL_DIR/include
          make -j$(nproc) CC=$CC
          make -j$(nproc) CC=$CC install INSTALLTOP=$DEST OPENSSLDIR=$DEST/ssl
        #
        # sqlite3
          cd ..
          $DOWNLOADER $SQLITE3
          tar zxvf sqlite-autoconf-3230100.tar.gz
          cd sqlite-autoconf-3230100/
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC=$HOST-gcc CXX=$HOST-g++ ./configure --host=$HOST --prefix=$PREFIX --enable-static --enable-shared --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE`
          make -j$(nproc)
          make -j$(nproc) install
        #
        # libssh2
          cd ..
          $DOWNLOADER $SSH2
          tar zxvf libssh2-1.7.0.tar.gz
          cd libssh2-1.7.0/
          rm -rf $PREFIX/lib/pkgconfig/libssh2.pc
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC=$HOST-gcc CXX=$HOST-g++ AR=$HOST-ar RANLIB=$HOST-ranlib ./configure --host=$HOST --without-libgcrypt --with-openssl --without-wincng --prefix=$PREFIX --enable-static --disable-shared
          make -j$(nproc)
          make -j$(nproc) install
        #
        #cleaning
          cd ..
          rm -rf c-ares*
          rm -rf sqlite-autoconf*
          rm -rf zlib-*
          rm -rf expat-*
          rm -rf openssl-*
          rm -rf libssh2-*
        #
        echo "finished!"
        
        git clone https://github.com/aria2/aria2
        cd aria2 && autoreconf -i
        
        # MAX_CONNECTION_PER_SERVER
        sed -i 's/"1", 1, 16/"128", 1, -1/g' ./src/OptionHandlerFactory.cc
        # MIN_SPLIT_SIZE
        sed -i 's/"20M", 1_m, 1_g/"4K", 1_k, 1_g/g' ./src/OptionHandlerFactory.cc
        # CONNECT_TIMEOUT
        sed -i 's/PREF_CONNECT_TIMEOUT, TEXT_CONNECT_TIMEOUT, "60", 1, 600/PREF_CONNECT_TIMEOUT, TEXT_CONNECT_TIMEOUT, "15", 1, 600/g' ./src/OptionHandlerFactory.cc
        # PIECE_LENGTH
        sed -i 's/PREF_PIECE_LENGTH, TEXT_PIECE_LENGTH, "1M", 1_m, 1_g/PREF_PIECE_LENGTH, TEXT_PIECE_LENGTH, "4k", 1_k, 1_g/g' ./src/OptionHandlerFactory.cc
        # RETRY_WAIT
        sed -i 's/new NumberOptionHandler(PREF_RETRY_WAIT, TEXT_RETRY_WAIT, "0", 0, 600/new NumberOptionHandler(PREF_RETRY_WAIT, TEXT_RETRY_WAIT, "2", 0, 600/g' ./src/OptionHandlerFactory.cc
        # SPLIT
        sed -i 's/new NumberOptionHandler(PREF_SPLIT, TEXT_SPLIT, "5", 1, -1,/new NumberOptionHandler(PREF_SPLIT, TEXT_SPLIT, "128", 1, -1,/g' ./src/OptionHandlerFactory.cc
           
        test -z "$HOST" && HOST=aarch64-linux-gnu
        test -z "$PREFIX" && PREFIX=/opt/aria2-arm/build_libs

        ARCH="aarch64"
        HOST="aarch64-linux-gnu"
        PREFIX="/opt/aria2-arm/build_libs"
        LOCAL_DIR="/opt/aria2-arm/build_libs"

        CFLAGS="-march=armv8-a+crypto+crc -mtune=cortex-a53"
        DEST="/usr/aarch64-linux-gnu"
        CC=$HOST-gcc
        CXX=$HOST-g++
        LDFLAGS="-L$DEST/lib"
        CPPFLAGS="-I$DEST/include"
        CXXFLAGS=$CFLAGS
        CONFIGURE="./configure --prefix=${LOCAL_DIR} --host=$HOST"

        ./configure \
            --host=$HOST \
            --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \
            --prefix=$PREFIX \
            --disable-nls \
            --without-gnutls \
            --with-openssl \
            --without-libxml2 \
            --with-libz --with-libz-prefix=${LOCAL_DIR} \
            --with-libexpat --with-libexpat-prefix=${LOCAL_DIR} \
            --with-slite3 --with-sqlite3-prefix=${LOCAL_DIR} \
            --with-libcares --with-libcares-prefix=${LOCAL_DIR} \
            --with-ca-bundle='/etc/ssl/certs/ca-certificates.crt' \
            LDFLAGS="-L$LOCAL_DIR/lib" \
            PKG_CONFIG_PATH="$LOCAL_DIR/lib/pkgconfig" \
            ARIA2_STATIC=yes
        make -j$(nproc)
        strip -s ./src/aria2c
        
    - name: Check compilation
      if: steps.compile.outcome != 'success'
      run: |
        curl -s --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=Compiling aria2 linux_aarch64 failed!!" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
        
    - name: Assemble Artifact
      run: |
        mkdir -p ${{ github.workspace }}/artifact
        cp ${{ github.workspace }}/aria2/src/aria2c ${{ github.workspace }}/artifact/aria2c_Linux_aarch64_Unlimited_threads
        
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifact/*
        tag: "Last_release"
        overwrite: true
        file_glob: true
 