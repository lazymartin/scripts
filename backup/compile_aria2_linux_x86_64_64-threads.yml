#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: GPL-3.0
# Author: lazymartin
#=================================================

name: Compile aria2 linux x86_64 Latest release

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TZ: Asia/Shanghai

on:
  schedule:
    - cron: '00 19 * * 0'
  push:
    paths: 
      - '.github/workflows/compile_aria2_linux_x86_64_64-threads.yml'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        
    - name: Install dependences
      id: dependences
      continue-on-error: true
      run: |
        
        #COMPILER AND PATH
        PREFIX=/opt/aria2/build_libs
        C_COMPILER="gcc"
        CXX_COMPILER="g++"
        
        DOWNLOADER="wget -c"
        
        ## DEPENDENCES ##
        ZLIB_ver=`curl -s http://www.zlib.net/|grep -A 3 "Current release"|grep -oE "([0-9]{1,2}\.){2}[0-9]{1,2}"`
        ZLIB=http://www.zlib.net/zlib-${ZLIB_ver}.tar.gz
        # ZLIB=http://sourceforge.net/projects/libpng/files/zlib/1.2.11/zlib-1.2.11.tar.gz
        OPENSSL_ver=`curl -s https://www.openssl.org/source/|grep -oE "[0-9]\.[0-9]{1,2}\.[0-9]{1,2}[a-z]"|sort|uniq|tail -n 1`
        OPENSSL=http://www.openssl.org/source/openssl-${OPENSSL_ver}.tar.gz
        # OPENSSL=http://www.openssl.org/source/openssl-1.0.2u.tar.gz
        EXPAT_ver_1=`curl -s --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/libexpat/libexpat/releases/latest|grep tag_name|awk -F "\"" '{print $4}'`
        EXPAT_ver_2=`echo ${EXPAT_ver_1}|sed "s/R_//g;s/_/\./g"`
        EXPAT=https://github.com/libexpat/libexpat/releases/download/${EXPAT_ver_1}/expat-${EXPAT_ver_2}.tar.bz2
        # EXPAT=https://github.com/libexpat/libexpat/releases/download/R_2_2_10/expat-2.2.10.tar.bz2
        SQLITE3_add=`curl -s https://www.sqlite.org/download.html|grep -oE "[0-9]{1,4}/sqlite-autoconf-[0-9]{1,7}.tar.gz"|head -n 1`
        SQLITE3_ver=`echo ${SQLITE3_add}|grep -oE "[0-9]{7}"`
        SQLITE3="https://sqlite.org/${SQLITE3_add}"
        C_ARES_ver=`curl -s https://c-ares.haxx.se/download/|grep -oE "([0-9]{1,2}\.){2}[0-9]{1,2}"|head -n 1`
        C_ARES=https://c-ares.haxx.se/download/c-ares-${C_ARES_ver}.tar.gz
        # C_ARES=https://c-ares.haxx.se/download/c-ares-1.16.1.tar.gz
        SSH2_ver=`curl -s https://www.libssh2.org|grep "The latest release"|grep -oE "([0-9]{1,2}\.){2}[0-9]{1,2}"`
        SSH2=https://www.libssh2.org/download/libssh2-${SSH2_ver}.tar.gz
        # SSH2=https://www.libssh2.org/download/libssh2-1.7.0.tar.gz
        
        ## CONFIG ##
        BUILD_DIRECTORY=/tmp/
        
        ## BUILD ##
        cd $BUILD_DIRECTORY
        #
         # zlib build
          $DOWNLOADER $ZLIB
          tar zxvf zlib-${ZLIB_ver}.tar.gz
          cd zlib-${ZLIB_ver}/
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC="$C_COMPILER" CXX="$CXX_COMPILER" ./configure --prefix=$PREFIX --static
          make -j$(nproc)
          make install
        #
         # expat build
          cd ..
          $DOWNLOADER $EXPAT
          tar jxvf expat-${EXPAT_ver_2}.tar.bz2
          cd expat-${EXPAT_ver_2}/
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC="$C_COMPILER" CXX="$CXX_COMPILER" ./configure --prefix=$PREFIX --enable-static --enable-shared
          make -j$(nproc)
          make install
        #
         # c-ares build
          cd ..
          $DOWNLOADER $C_ARES
          tar zxvf c-ares-${C_ARES_ver}.tar.gz
          cd c-ares-${C_ARES_ver}/
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC="$C_COMPILER" CXX="$CXX_COMPILER" ./configure --prefix=$PREFIX --enable-static --disable-shared
          make -j$(nproc)
          make install
        #
         # Openssl build
          cd ..
          $DOWNLOADER $OPENSSL
          tar zxvf openssl-${OPENSSL_ver}.tar.gz
          cd openssl-${OPENSSL_ver}/
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC="$C_COMPILER" CXX="$CXX_COMPILER" ./Configure --prefix=$PREFIX linux-x86_64 shared
          make -j$(nproc)
          make install
        #
         # sqlite3
          cd ..
          $DOWNLOADER $SQLITE3
          tar zxvf sqlite-autoconf-${SQLITE3_ver}.tar.gz
          cd sqlite-autoconf-${SQLITE3_ver}/
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC="$C_COMPILER" CXX="$CXX_COMPILER" ./configure --prefix=$PREFIX --enable-static --enable-shared
          make -j$(nproc)
          make install
        #
         # libssh2
          cd ..
          $DOWNLOADER $SSH2
          tar zxvf libssh2-${SSH2_ver}.tar.gz
          cd libssh2-${SSH2_ver}/
          rm -rf $PREFIX/lib/pkgconfig/libssh2.pc
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig/ LD_LIBRARY_PATH=$PREFIX/lib/ CC="$C_COMPILER" CXX="$CXX_COMPILER" ./configure --without-libgcrypt --with-openssl --without-wincng --prefix=$PREFIX --enable-static --disable-shared
          make -j$(nproc)
          make install

    - name: Check dependency installation
      # if: steps.dependences.outcome != 'success' || steps.compile.outcome != 'success'
      if: steps.dependences.outcome != 'success'
      run: |
        curl -s --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=Failed to install aria2 linux_x64 dependency, compilation terminated!!" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

    - name: Compile
      id: compile
      continue-on-error: true
      run: |
        REPO_NAME="aria2/aria2"
        FILE_VER=`curl -s --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$REPO_NAME/releases/latest|grep tag_name|awk -F "\"" '{print $4}'|grep -oE "([0-9]{1,2}\.){2}[0-9]{1,2}"`
        FILE_NAME=`curl -s --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$REPO_NAME/releases/latest|grep $FILE_VER.tar.xz|awk -F "\"" 'NR==1 {print $4}'`
        DOWNLOAD_LINK=`curl -s --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$REPO_NAME/releases/latest|grep -oE "https://github.com.*$FILE_VER.tar.xz"`
        
        wget -q $DOWNLOAD_LINK --show-progress -O $FILE_NAME
        tar xf $FILE_NAME
        cd `echo $FILE_NAME|sed "s/.tar.xz//g"`
        sed -i s"/\"1\"\, 1\, 16\, \'x\'/\"1\"\, 1\, 64\, \'x\'/g" ./src/OptionHandlerFactory.cc
        sed -i s"/1\, 16\,/1\, 64\,/" ./src/OptionHandlerFactory.cc
        
        #COMPILER AND PATH
        PREFIX=/usr/sbin
        C_COMPILER="gcc"
        CXX_COMPILER="g++"
        
        ## BUILD ##
        PKG_CONFIG_PATH=/opt/aria2/build_libs/lib/pkgconfig/ \
        LD_LIBRARY_PATH=/opt/aria2/build_libs/lib/ \
        CC="$C_COMPILER" \
        CXX="$CXX_COMPILER" \
        ./configure \
            --prefix=$PREFIX \
            --without-libxml2 \
            --without-libgcrypt \
            --with-openssl \
            --without-libnettle \
            --without-gnutls \
            --without-libgmp \
            --with-libssh2 \
            --with-sqlite3 \
            --with-ca-bundle='/etc/ssl/certs/ca-certificates.crt' \
            ARIA2_STATIC=yes \
            --enable-shared=no
        make -j$(nproc)
        strip -s ./src/aria2c

    - name: Check compilation
      if: steps.compile.outcome != 'success'
      run: |
        curl -s --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=Compiling aria2 linux_x64 failed!!" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

    - name: Assemble Artifact
      run: |
        mkdir -p ./artifact
        REPO_NAME="aria2/aria2"
        FILE_VER=`curl -s --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$REPO_NAME/releases/latest|grep tag_name|awk -F "\"" '{print $4}'|grep -oE "([0-9]{1,2}\.){2}[0-9]{1,2}"`
        work_path=`curl -s --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$REPO_NAME/releases/latest|grep $FILE_VER.tar.xz|awk -F "\"" 'NR==1 {print $4}'|sed "s/.tar.xz//g"`
        cp /home/runner/work/scripts/scripts/${work_path}/src/aria2c ./artifact/aria2c_linux_x86_64_64-threads
        
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifact/*
        tag: "Last_release"
        overwrite: true
        file_glob: true
 
