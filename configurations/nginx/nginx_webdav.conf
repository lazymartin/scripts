user  nobody nogroup;
worker_processes  4;

pid /run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    charset utf-8;
    server_tokens off; # turn off server version showup
    
    proxy_set_header X-Real-IP       $proxy_protocol_addr;
    proxy_set_header X-Forwarded-For $proxy_protocol_addr;

    log_format proxy '$proxy_protocol_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent"'
                        '"$http_x_forwarded_for" $request_id ';
    
    # root /usr/share/nginx/html;
    root /mnt/dav; 

    server {
        listen 80 default_server;
        server_name ${x_domain};
        return 301 https://$host$request_uri;
    }

    server {
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains" always;
        # listen  unix:/dev/shm/default.sock proxy_protocol;
        # listen  unix:/dev/shm/h2c.sock http2 proxy_protocol;
        listen  127.0.0.1:${fallback_port_http} proxy_protocol;
        listen  127.0.0.1:${fallback_port_http2} http2 proxy_protocol;
        server_name  ${x_domain};
        access_log  /var/log/nginx/access.log proxy;#  off;
        error_log  /var/log/nginx/error.log;
        
        # proxy_set_header Host $host;
        # proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection "upgrade";
        
        set_real_ip_from  127.0.0.1;
        real_ip_header proxy_protocol;  # X-Forwarded-For;
        real_ip_recursive on;

        auth_basic "Authorized Users Only";
        auth_basic_user_file /etc/nginx/.htpasswd;
    }

    server {
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains" always;
        listen  ${webdav_port} ssl;
        server_name ${x_domain}
        ssl_session_timeout  5m;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_certificate     /etc/ssl/web.crt;
        ssl_certificate_key  /etc/ssl/web.key;
        
        send_timeout 3600;
        client_body_timeout 3600;
        keepalive_timeout 3600;
        lingering_timeout 3600;
        client_max_body_size 0;
        
        access_log  /var/log/nginx/access.log;
        error_log  /var/log/nginx/error.log;
        
        auth_basic "Authorized Users Only";
        auth_basic_user_file /etc/nginx/.htpasswd;
      
        set $webdav_root "/mnt/dav";
        location / {
          root			$webdav_root;
          error_page		599 = @propfind_handler;
          error_page		598 = @delete_handler;
          error_page		597 = @copy_move_handler;
          open_file_cache		off;
          client_max_body_size	50m;
          
          dav_methods		PUT MKCOL;
          dav_ext_methods		OPTIONS;
          create_full_put_path	on;
          min_delete_depth	0;
          dav_access		user:rw group:rw all:rw;

          autoindex		on;
          autoindex_exact_size	on;
          autoindex_localtime	on;

          if ($ssl_protocol = "") { # Block non ssl/tls connections.
            add_header	Strict-Transport-Security 'max-age=600';
            return 403;
          }
          
          if ($request_method = OPTIONS) {
            add_header	Allow 'OPTIONS, GET, HEAD, POST, PUT, MKCOL, MOVE, COPY, DELETE, PROPFIND, PROPPATCH';
            add_header	DAV '1, 2';
            return 200;
          }

          if ($request_method = PROPFIND) {
            return 599;
          }
          
          if ($request_method = PROPPATCH) { # Unsupported, allways return OK.
            add_header	Content-Type 'text/xml';
            return		207 '<?xml version="1.0"?><a:multistatus xmlns:a="DAV:"><a:response><a:propstat><a:status>HTTP/1.1 200 OK</a:status></a:propstat></a:response></a:multistatus>';
          }
          
          if ($request_method = MKCOL) { # Microsoft specific handle: add trailing slash.
            rewrite ^(.*[^/])$ $1/ break;
          }
          
          if ($request_method = DELETE) {
            return 598;
          }
          
          if ($request_method = COPY) {
            return 597;
          }
          
          if ($request_method = MOVE) {
            return 597;
          }
        }
        
        location @propfind_handler {
          internal;

          open_file_cache	off;
          if (!-e $webdav_root/$uri) { # Microsoft specific handle.
            return 404;
          }
          root			$webdav_root;
          dav_ext_methods		PROPFIND;
        }
        
        location @delete_handler {
          internal;

          open_file_cache	off;
          if (-d $webdav_root/$uri) { # Microsoft specific handle: Add trailing slash to dirs.
            rewrite ^(.*[^/])$ $1/ break;
          }
          root			$webdav_root;
          dav_methods		DELETE;
        }
        
        location @copy_move_handler {
          internal;

          open_file_cache	off;
          if (-d $webdav_root/$uri) { # Microsoft specific handle: Add trailing slash to dirs.
            more_set_input_headers 'Destination: $http_destination/';
            rewrite ^(.*[^/])$ $1/ break;
          }
          root			$webdav_root;
          dav_methods		COPY MOVE;
        }
        
        location ~ \.(_.*|DS_Store|Spotlight-V100|TemporaryItems|Trashes|hidden|localized)$ {
            access_log  off;
            error_log   off;

            if ($request_method = PUT) {
                return 403;
            }
            return 404;
        }

        location ~ \.metadata_never_index$ {
            return 200 "Don't index this drive, Finder!";
        }
    }
}
